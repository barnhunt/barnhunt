name: Use PyOxidize to build executable installer for Windows

on:
  workflow_call:
    # https://docs.github.com/en/actions/using-workflows/reusing-workflows

jobs:
  build:
    name: ${{ matrix.os }} PyOxidizer build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Use older ubuntu for libc b/c
          # If built on 22.04 I get "version `GLIBC_2.35' not found"
          # when running on 20.04.
          # - os: 'ubuntu-latest'
          # - os: 'ubuntu-20.04'
          #   targets: install

          # Blindly use older Windows for the same reason
          #
          # (The exe_installer target will build both .exe and .msi installers,
          # so use just one or the other.)
          # - 'windows-latest'
          - os: 'windows-2019'
            targets: msi_installer

          # Don't build on macOS. I have no way to test this.
          # - os: 'macos-latest'
          #   targets: install


    steps:
    - uses: actions/checkout@v3
      with:
        lfs: true
        fetch-depth: 0

    - uses: actions/setup-python@v4
      with:
        python-version: '3.10.9'

    - run: python -m pip install pip-tools pyoxidizer pdm
    - run: pyoxidizer --version
    - run: python pyoxidizer/build.py --release ${{ matrix.targets }}

    - uses: actions/upload-artifact@v3
      with:
        name: oxidized
        path: |
          pyoxidizer/*.msi
          pyoxidizer/*.exe
          pyoxidizer/*.app
          pyoxidizer/build/**/install

  test:
    name: Test
    needs: [build]
    runs-on: windows-latest
    env:
      BARNHUNT_DUMP_LOADED_MODULES: 'yes'

    steps:
    - uses: actions/checkout@v3
      with:
        lfs: true
    - uses: actions/download-artifact@v3
      with:
        name: oxidized
    - run: Get-ChildItem -Recurse

    - name: Install MSI
      run: |
        $file = Get-ChildItem -Filter *.msi | Select-Object -First 1
        $args = "/i `"$($file.FullName)`" /qn /l `"install-msi.log`""
        $proc = Start-Process "msiexec" $args -NoNewWindow -PassThru -Wait
        Get-Content -Path "install-msi.log"
        if ($proc.ExitCode -ne 0) { Throw "Could not install MSI" }

        $installed = (
          Get-ChildItem $env:ProgramFiles "barnhunt" -Directory
          | Select-Object -ExpandProperty FullName
        )
        if ($installed.length -eq 0) { Throw "Could not find path to installed path" }
        $installed | Out-File $env:GITHUB_PATH utf8 -Append
        echo $installed

    - run: choco install --no-progress --timeout 600 inkscape
    - run: inkscape --debug-info

    - run: barnhunt --version
    - run: barnhunt rats
    - run: barnhunt install
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - run: barnhunt pdfs --no-shell-mode-inkscape ".\tests\drawing.svg"
    - run: barnhunt pdfs ".\tests\drawing.svg"
      continue-on-error: true
    - run: barnhunt uninstall
    - run: barnhunt 2up ".\pdfs\novice.pdf"

    - uses: actions/upload-artifact@v3
      if: always()
      with:
        name: oxidized_test
        if-no-files-found: error
        path: |
          pdfs
          barnhunt-modules.*
