name: Tests

on:
  workflow_call:
    # https://docs.github.com/en/actions/using-workflows/reusing-workflows
    outputs:
      version-type:
        description: |
          Type of version (from VCS version). This is one of 'local', 'dev', 'pre',
          or 'release'.

          Note that unless a commit is tagged, the version type will always be 'local'.
        value: ${{ jobs.build.outputs.version-type }}

  workflow_dispatch:

jobs:
  pytest:
    name: ${{ matrix.os }} py${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest']
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        include:
          - os: 'windows-latest'
            python-version: '3.12'
            install-inkscape: true
          - os: 'macos-latest'
            python-version: '3.12'
            install-inkscape: true
          - python-version: '3.12'
            install-inkscape: true

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install inkscape (apt-get)
      if: runner.os == 'Linux' && matrix.install-inkscape
      run: |
        sudo apt-get update
        sudo apt-get install -y inkscape

    - name: Install inkscape (chocolatey)
      if: runner.os == 'Windows' && matrix.install-inkscape
      run: choco install --no-progress --timeout 600 inkscape

    - name: Install inkscape (homebrew)
      if: runner.os == 'macOS' && matrix.install-inkscape
      # This step seems to fail sporadically
      continue-on-error: true
      run: brew install inkscape

    - name: Install tox
      run: |
        python -m pip install --upgrade pip
        pip install tox tox-gh-actions

    - name: Get Inkscape Info
      run: |
        # Use inkscape in the hopes that it will run faster during the
        # tests (on Windows).
        if inkscape --debug-info; then
          inkscape --query-height tests/drawing.svg
        fi
      shell: bash

    - name: Test with tox
      run: tox
      env:
        # GITHUB_TOKEN gives us higher GH REST API rate-limits
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - uses: actions/upload-artifact@v4
      with:
        name: coverage-data-${{ matrix.python-version }}-${{ matrix.os }}
        path: .coverage.*
        include-hidden-files: true
        retention-days: 1       # save money

  coverage:
    name: Coverage Report
    needs: pytest
    if: always()
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install coverage[toml]
    - uses: actions/download-artifact@v4
      with:
        pattern: coverage-data-*
        merge-multiple: true
    - name: Test coverage
      run: |
        coverage combine
        coverage report --fail-under=100 --show-missing

  lint:
    name: Lint Checks
    runs-on: ubuntu-latest
    env:
      python-version: '3.12'
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      id: py
      with:
        python-version: ${{ env.python-version }}
    - name: pre-commit cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pre-commit
          ~/.cache/pip
        key: py-${{ env.python-version }}-${{ hashFiles('.pre-commit-config.yaml', 'pdm.lock') }}

    - name: Install python deps
      run: |
        python -m pip install --upgrade pip
        pip install tox pre-commit

    - name: Lint
      run: tox -e lint

    - name: Mypy
      if: always()
      run: tox -e mypy

    - name: Pre-Commit
      if: always()
      run: pre-commit run --all-files

  build:
    name: Build python package
    needs: [pytest, coverage, lint]
    runs-on: ubuntu-latest
    outputs:
      version-type: ${{ steps.classify-version.outputs.version-type }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - run: python -m pip install --upgrade pip
    - run: python -m pip install pdm packaging
    - run: pdm build
    - uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
        retention-days: 1       # save money
    - name: Classify Version
      id: classify-version
      run: |
        pdm show --version | python -c '
        import sys, packaging.version
        version = packaging.version.parse(sys.stdin.read())
        if version.local:
            version_type = "local"
        elif version.is_devrelease:
            version_type = "dev"
        elif version.is_prerelease:
            version_type = "pre"
        else:
            version_type = "release"
        print(f"version-type={version_type}")
        print(f"version-type={version_type}", file=sys.stderr)
        ' >> "$GITHUB_OUTPUT"
