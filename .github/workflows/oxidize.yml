name: PyOxidize build and test

on:
  workflow_call:
    # https://docs.github.com/en/actions/using-workflows/reusing-workflows
  workflow_dispatch:

jobs:
  build:
    name: ${{ matrix.os }} PyOxidizer build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Use older OS for libc b/c
          # - os: 'ubuntu-20.04'
          #   targets: install
          #   pyoxidizer-cache: ~/.cache/pyoxidizer

          - os: 'windows-2019'
            targets: msi_installer
            pyoxidizer-cache: ~\AppData\Local\pyoxidizer
            # (The exe_installer target will build both .exe and .msi
            # installers, so use just one or the other.)

          # Don't build on macOS. I have no way to test this.
          # - os: 'macos-latest'
          #   targets: install
          #   pyoxidizer-cache: ~/Library/Caches/pyoxidizer

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: PyOxidizer cache
      uses: actions/cache@v3
      with:
        path: ${{ matrix.pyoxidizer-cache }}
        key: ${{ matrix.os }}-pyoxidizer-${{ hashFiles('pdm.lock', '**/*.bzl') }}

    - uses: actions/setup-python@v4
      with:
        python-version: '3.10.9'
        cache: 'pip'
        cache-dependency-path: pdm.lock

    - run: python -m pip install pdm
    - run: pdm install
    - run: pdm run pyoxidizer --version
    - run: pdm oxidize --release ${{ matrix.targets }}

    - uses: actions/upload-artifact@v3
      with:
        name: oxidized
        path: |
          pyoxidizer/*.msi
          pyoxidizer/*.exe
          pyoxidizer/*.app
          pyoxidizer/build/**/install
        retention-days: 1       # save money

  test:
    name: Test
    needs: [build]
    runs-on: windows-latest
    env:
      BARNHUNT_DUMP_LOADED_MODULES: 'yes'
      test-svg: .\src\tests\drawing.svg

    steps:
    - uses: actions/checkout@v3
      with:
        path: src
    - uses: actions/download-artifact@v4.1.7
      with:
        name: oxidized
    - run: Get-ChildItem -Recurse

    - name: Install MSI
      run: |
        $file = Get-ChildItem -Filter *.msi | Select-Object -First 1
        $args = "/i `"$($file.FullName)`" /qn /l `"install-msi.log`""
        $proc = Start-Process "msiexec" $args -NoNewWindow -PassThru -Wait
        Get-Content -Path "install-msi.log"
        if ($proc.ExitCode -ne 0) { Throw "Could not install MSI" }

        # Find install location and add to path
        $installed = (
          Get-ChildItem $env:ProgramFiles "barnhunt" -Directory
          | Select-Object -ExpandProperty FullName
        )
        if ($installed.length -eq 0) { Throw "Could not find path to installed path" }
        $installed | Out-File $env:GITHUB_PATH utf8 -Append
        echo $installed

    - name: Install Inkscape
      run: choco install --no-progress --timeout 600 inkscape
    - run: inkscape --debug-info
    - run: inkscape --query-height ${{ env.test-svg }}

    # Run a bunch of tests
    - run: barnhunt
    - run: barnhunt --help
    - run: barnhunt --version
    - run: barnhunt debug-info
    - run: barnhunt rats
    - run: barnhunt install
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - run: barnhunt --no-shell-mode-inkscape pdfs ${{ env.test-svg }}

    # XXX: shell-mode seems to fail sporadically?
    - run: barnhunt pdfs ${{ env.test-svg }}
      continue-on-error: true
    - run: barnhunt uninstall
    - run: barnhunt 2up ".\pdfs\novice.pdf"

    - uses: actions/upload-artifact@v3
      if: always()
      with:
        name: oxidized_test
        if-no-files-found: error
        path: |
          pdfs
          barnhunt-modules.*
        retention-days: 1       # save money
